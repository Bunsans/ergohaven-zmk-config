#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&mt {
    quick-tap-ms = <200>;
    flavor = "tap-preferred";
    require-prior-idle-ms = <125>;
};

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        kha {
            bindings = <&kp LBKT>;
            key-positions = <6 7>;
        };

        hrdsgn {
            bindings = <&kp RBKT>;
            key-positions = <7 8>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
  &kp Q                &kp W        &kp E         &kp R                &kp T                          &kp Y  &kp U          &kp I         &kp O        &kp P
  &hml LEFT_CONTROL A  &hml LALT S  &hml LSHFT D  &hml LEFT_COMMAND F  &kp G                          &kp H  &hmr RCMD J    &hmr RSHFT K  &hmr LALT L  &hmr RCTRL SEMICOLON
  &kp Z                &kp X        &kp C         &kp V                &kp B                          &kp N  &kp M          &kp COMMA     &kp DOT      &kp SLASH
                                                  &kp LCMD             &mo 1  &kp SPACE    &kp ENTER  &mo 2  &kp BACKSPACE
            >;
        };

        nav {
            bindings = <
  &kp ESC  &kp N7  &kp N8  &kp N9  &to 7                            &kp N6          &kp N7          &kp N8        &kp N9               &kp SQT
  &kp TAB  &kp N4  &kp N5  &kp N6  &kp LG(SPACE)                    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT            &kp GRAVE
  &kp N0   &kp N1  &kp N2  &kp N3  &kp DELETE                       &kp LA(LEFT)    &kp HOME        &kp END       &kp LA(RIGHT_ARROW)  &kp LS(LG(NUMBER_5))
                           &trans  &trans         &trans    &trans  &mo 3           &trans
            >;
        };

        sym {
            bindings = <
  &kp EXCLAMATION  &kp LT         &kp EQUAL          &kp GT        &kp QUESTION                    &kp TILDE      &kp LBKT              &kp UNDER      &kp RBKT               &kp CARET
  &kp PERCENT      &kp SLASH      &kp MINUS          &kp ASTERISK  &kp PLUS                        &kp AMPERSAND  &kp LEFT_PARENTHESIS  &kp COLON      &kp RIGHT_PARENTHESIS  &kp DOLLAR
  &kp AT_SIGN      &kp BACKSLASH  &kp DOUBLE_QUOTES  &kp HASH      &kp SQT                         &kp PIPE       &kp LEFT_BRACE        &kp SEMICOLON  &kp RIGHT_BRACE        &kp GRAVE
                                                     &trans        &mo 3         &trans    &trans  &trans         &trans
            >;
        };

        adj {
            bindings = <
  &bootloader  &kp F1        &kp F2         &kp F3         &kp F4                     &bt BT_SEL 0  &bt BT_SEL 1         &bt BT_SEL 2       &bt BT_SEL 3        &bt BT_CLR
  &to 0        &hml LALT F5  &hml LSHFT F6  &hml LCTRL F7  &kp F8                     &out OUT_BLE  &hmr RCTRL C_VOL_DN  &hmr RSHFT C_MUTE  &hmr LALT C_VOL_UP  &kp RGUI
  &to 4        &kp F9        &kp F10        &kp F11        &kp F12                    &to 7         &kp C_PREV           &kp C_PP           &kp C_NEXT          &studio_unlock
                                            &trans         &trans   &trans    &trans  &trans        &trans
            >;
        };

        gaming {
            bindings = <
  &kp TAB       &kp Q  &kp W  &kp E      &kp R                          &kp T  &kp Y          &kp U  &kp I      &kp O
  &kp LSHIFT    &kp A  &kp S  &kp D      &kp F                          &kp G  &kp H          &kp J  &kp K      &kp L
  &kp LEFT_ALT  &kp Z  &kp X  &kp C      &kp V                          &kp B  &kp N          &kp M  &kp COMMA  &kp DOT
                              &kp LCTRL  &mo 5  &kp SPACE    &kp ENTER  &mo 6  &kp BACKSPACE
            >;
        };

        gaming_navigate {
            bindings = <
  &kp ESC        &kp N1  &kp N2  &kp N3  &kp T                     &kp N6          &kp N7          &kp N8        &kp N9               &kp SQT
  &kp LG(SPACE)  &kp N4  &kp N5  &kp N6  &kp G                     &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT            &kp GRAVE
  &kp N0         &kp N7  &kp N8  &kp N9  &kp B                     &kp LA(LEFT)    &kp HOME        &kp END       &kp LA(RIGHT_ARROW)  &none
                                 &trans  &trans  &trans    &trans  &mo 3           &trans
            >;
        };

        gaming_sym {
            bindings = <
  &kp EXCLAMATION  &kp LT         &kp EQUAL          &kp GT        &kp QUESTION                    &kp TILDE      &kp LBKT              &kp UNDER      &kp RBKT               &kp CARET
  &kp PERCENT      &kp SLASH      &kp MINUS          &kp ASTERISK  &kp PLUS                        &kp AMPERSAND  &kp LEFT_PARENTHESIS  &kp COLON      &kp RIGHT_PARENTHESIS  &kp DOLLAR
  &kp AT_SIGN      &kp BACKSLASH  &kp DOUBLE_QUOTES  &kp HASH      &kp SQT                         &kp PIPE       &kp LEFT_BRACE        &kp SEMICOLON  &kp RIGHT_BRACE        &kp GRAVE
                                                     &trans        &mo 3         &trans    &trans  &trans         &trans
            >;
        };

        base_linux {
            bindings = <
  &kp Q                &kp W        &kp E         &kp R                &kp T                          &kp Y  &kp U          &kp I         &kp O        &kp P
  &hml LEFT_CONTROL A  &hml LALT S  &hml LSHFT D  &hml LEFT_COMMAND F  &kp G                          &kp H  &hmr RCMD J    &hmr RSHFT K  &hmr LALT L  &hmr RCTRL SEMICOLON
  &kp Z                &kp X        &kp C         &kp V                &kp B                          &kp N  &kp M          &kp COMMA     &kp DOT      &kp SLASH
                                                  &kp LCTRL            &mo 8  &kp SPACE    &kp ENTER  &mo 9  &kp BACKSPACE
            >;
        };

        nav_linux {
            bindings = <
  &kp ESC  &kp N7  &kp N8  &kp N9  &to 0                            &kp N6          &kp N7          &kp N8        &kp N9               &kp SQT
  &kp TAB  &kp N4  &kp N5  &kp N6  &kp LG(SPACE)                    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT            &kp GRAVE
  &kp N0   &kp N1  &kp N2  &kp N3  &kp DELETE                       &kp LC(LEFT)    &kp HOME        &kp END       &kp LC(RIGHT_ARROW)  &kp LS(LG(PRINTSCREEN))
                           &trans  &trans         &trans    &trans  &mo 10          &trans
            >;
        };

        sym_linux {
            bindings = <
  &kp EXCLAMATION  &kp LT         &kp EQUAL          &kp GT        &kp QUESTION                    &kp TILDE      &kp LBKT              &kp UNDER      &kp RBKT               &kp CARET
  &kp PERCENT      &kp SLASH      &kp MINUS          &kp ASTERISK  &kp PLUS                        &kp AMPERSAND  &kp LEFT_PARENTHESIS  &kp COLON      &kp RIGHT_PARENTHESIS  &kp DOLLAR
  &kp AT_SIGN      &kp BACKSLASH  &kp DOUBLE_QUOTES  &kp HASH      &kp SQT                         &kp PIPE       &kp LEFT_BRACE        &kp SEMICOLON  &kp RIGHT_BRACE        &kp GRAVE
                                                     &trans        &mo 10        &trans    &trans  &trans         &trans
            >;
        };

        adj_linux {
            bindings = <
  &bootloader  &kp F1        &kp F2         &kp F3         &kp F4                     &bt BT_SEL 0  &bt BT_SEL 1         &bt BT_SEL 2       &bt BT_SEL 3        &bt BT_CLR
  &to 0        &hml LALT F5  &hml LSHFT F6  &hml LCTRL F7  &kp F8                     &out OUT_BLE  &hmr RCTRL C_VOL_DN  &hmr RSHFT C_MUTE  &hmr LALT C_VOL_UP  &kp RGUI
  &to 4        &kp F9        &kp F10        &kp F11        &kp F12                    &to 7         &kp C_PREV           &kp C_PP           &kp C_NEXT          &studio_unlock
                                            &trans         &trans   &trans    &trans  &trans        &trans
            >;
        };
    };
};
